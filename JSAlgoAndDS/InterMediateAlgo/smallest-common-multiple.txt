/*
Intermediate Algorithm Scripting: Smallest Common Multiple
Find the smallest common multiple of the provided parameters that can be evenly divided by both, as well as by all sequential numbers in the range between these parameters.

The range will be an array of two numbers that will not necessarily be in numerical order.

For example, if given 1 and 3, find the smallest common multiple of both 1 and 3 that is also evenly divisible by all numbers between 1 and 3. The answer here would be 6.
*/

function smallestCommons(arr) {
  // we are going to use Euclid algorithm for finding the lcm
  // lcm(a,b) = (a*b)/gcd(a+b)

  // sort the array in ascending order and loop from start to end of the array
  arr = arr.sort(function(a,b){return a-b;});

  // push all numbers between the array
  var numbers = [], prevDivisor = 0;
  for(let number = arr[0]; number <= arr[arr.length -1 ]; number++){numbers.push(number);}
  var divisor = 0, divident = 0, remainder = 0;
  divisor = arr[0];
  
  for(let index = 1; index < numbers.length; index++){

    // find the gcd for each pair of numbers;
    divident = numbers[index];
    prevDivisor = divisor;  

    // find gcd 
    while (divisor && divident){
      if ( divisor > divident){
        divisor %= divident;
      } else {
        divident %= divisor;
      }

    }

      // Euclid method to find lcm 
      divisor = (prevDivisor * numbers[index])/(divisor + divident);
  }

  // the lcm value from divisor
  return(divisor)

  
  
}
smallestCommons([10,2])

smallestCommons([2, 10])
  
//smallestCommons([1,5]);